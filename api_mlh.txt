Application Programming Interfaces (APIs) are constructs made available in programming languages to
 allow developers to create complex functionality more easily. They abstract more complex code away 
from you, providing some easier syntax to use in its place.

As a real-world example, think about the electricity supply in your house, apartment, or other dwellings. 
If you want to use an appliance in your house, you plug it into a plug socket and it works. 
You don't try to wire it directly into the power supply — to do so would be really inefficient and, 
if you are not an electrician, difficult and dangerous to attempt.

Browser APIs
Third-party APIs

Relationship between JavaScript, APIs, and other JavaScript tools
So above, we talked about what client-side JavaScript APIs are, and how they relate to the JavaScript language. Let's recap this to make it clearer, and also mention where other JavaScript tools fit in:

JavaScript — A high-level scripting language built into browsers that allows you to implement functionality on web pages/apps. Note that JavaScript is also available in other programming environments, such as Node.
Browser APIs — constructs built into the browser that sits on top of the JavaScript language and allows you to implement functionality more easily.
Third-party APIs — constructs built into third-party platforms (e.g. Twitter, Facebook) that allow you to use some of those platform's functionality in your own web pages (for example, display your latest Tweets on your web page).
JavaScript libraries — Usually one or more JavaScript files containing custom functions that you can attach to your web page to speed up or enable writing common functionality. Examples include jQuery, Mootools and React.